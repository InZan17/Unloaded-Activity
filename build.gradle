plugins {
	id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
	id 'architectury-plugin' version '3.4-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
	id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
	minecraft = project.minecraft_version
}

minecraft_version_string = project.minecraft_version.replace(".", "_")

def supported_versions = supported_versions.replaceAll(" ", "").split(",")

def build_properties_text = new StringBuilder()

def version_index = -1

def java_version = JavaVersion.VERSION_17
def java_version_int = 17

def using_yarn_neo_patch = false

using_neo = false

supported_versions.eachWithIndex { version, index ->
	def version_string = version.replace(".", "_")
	build_properties_text.append("MC_$version_string=$index\n")

	if (version == neo_switch_version && version_index == -1) {
		using_neo = true
	}

	if (version == neo_yarn_switch_version && version_index == -1) {
		using_yarn_neo_patch = true
	}

	if (version == java_21_switch_version && version_index == -1) {
		java_version = JavaVersion.VERSION_21
		java_version_int = 21
	}

	if (version_string == minecraft_version_string) {
		version_index = index
	}
}

if (version_index == -1) {
	throw new GradleException("Current Minecraft version $minecraft_version_string is not part of the supported versions.")
}

build_properties_text.append("MC_VER=$version_index")

new File(projectDir, "build.properties").text = build_properties_text

cloth_version = project["cloth_version_" + minecraft_version_string]
modmenu_version = project["modmenu_version_" + minecraft_version_string]
compatible_versions = project["compatible_versions_" + minecraft_version_string]
yarn_mappings = project["yarn_mappings_" + minecraft_version_string]
if (using_neo) {
	neo_or_forge_version = project["neo_version_" + minecraft_version_string]
} else {
	neo_or_forge_version = project["forge_version_" + minecraft_version_string]
}

if (using_yarn_neo_patch) {
	neo_yarn_mappings = project["neo_yarn_mappings_" + minecraft_version_string]
} else {
	neo_yarn_mappings = yarn_mappings
}

def version_range = project.compatible_versions.split("-")
if (version_range.length == 1) {
	compatible_versions_fabric_format = version_range[0]
	compatible_versions_neo_or_forge_format = "["+version_range[0]+"]"
} else if (version_range.length == 2) {
	compatible_versions_fabric_format = ">="+version_range[0]+" <="+version_range[1]
	compatible_versions_neo_or_forge_format = "["+version_range[0]+","+version_range[1]+"]"
} else {
	throw new GradleException("Wrong version format: $project.compatible_versions")
}

forgix {
	group = "lol.zanspace.unloadedactivity"
	mergedJarName = "$archives_name-v$mod_version+${compatible_versions}.jar"

	fabric {
		jarLocation = "build/libs/$archives_name-fabric-v$mod_version+${compatible_versions}.jar"
	}

	if (using_neo) {
		neoforge {
			jarLocation = "build/libs/$archives_name-neoforge-v$mod_version+${compatible_versions}.jar"
		}
	} else {
		forge {
			jarLocation = "build/libs/$archives_name-forge-v$mod_version+${compatible_versions}.jar"
		}
	}
}

allprojects { p ->
	group = rootProject.maven_group
	version = "v" + rootProject.mod_version + "+" + rootProject.compatible_versions
}

tasks.withType(JavaCompile) {
	options.compilerArgs += ['-Xplugin:Manifold']
}

subprojects {
	apply plugin: 'dev.architectury.loom'
	apply plugin: 'architectury-plugin'
	apply plugin: 'maven-publish'

	base {
		// Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
		archivesName = "$rootProject.archives_name-$project.name"
	}

	repositories {
		maven { url "https://maven.terraformersmc.com/releases/" }
		maven {url "https://maven.terraformersmc.com/"}
		maven {url "https://maven.shedaniel.me/"}
	}

	dependencies {
		minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
		if (using_yarn_neo_patch) {
			mappings loom.layered {
				it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
				it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.neo_yarn_mappings")
			}
		} else {
			mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
		}

		annotationProcessor 'systems.manifold:manifold-preprocessor:2025.1.27'
		testAnnotationProcessor 'systems.manifold:manifold-preprocessor:2025.1.27'
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		sourceCompatibility = java_version
		targetCompatibility = java_version
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.release = java_version_int
	}

	// Configure Maven publishing.
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifactId = base.archivesName.get()
				from components.java
			}
		}

		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		repositories {
			// Add repositories to publish to here.
			// Notice: This block does NOT have the same function as the block in the top level.
			// The repositories here will be used for publishing your artifact, not for
			// retrieving dependencies.
		}
	}
}