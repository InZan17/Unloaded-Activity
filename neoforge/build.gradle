plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}
dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neo_or_forge_version"

    if (rootProject.include_extra_dependencies == true) {
        modApi ("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_version}")
    } else {
        modCompileOnlyApi ("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_version}")
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', rootProject.mod_version
    inputs.property "compatible_versions", rootProject.compatible_versions_neo_or_forge_format

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version, "compatible_versions": rootProject.compatible_versions_neo_or_forge_format
    }

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": rootProject.mod_version, "compatible_versions": rootProject.compatible_versions_neo_or_forge_format
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xplugin:Manifold']
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
